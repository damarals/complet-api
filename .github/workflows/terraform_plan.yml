name: "Create terraform plan of the API infrastructure"

on: 
  pull_request:
    branches:
      - main # prod
      - staging

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  plan-staging:
    name: "terraform plan for staging"
    if: ${{ github.base_ref == 'staging' }}
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: 'infra'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      - name: "Terraform fmt"
        id: fmt
        run: terraform fmt -check

      - name: "Terraform init"
        id: init
        run: terraform init -backend=true -backend-config="config/staging/backend.hcl"

      - name: "Terraform validate"
        id: validate
        run: terraform validate -no-color

      - name: "Terraform plan"
        id: plan
        run: terraform plan -no-color -var-file="config/staging/terraform.tfvars"
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `
            ## Terraform Staging Environment Planner
            
            ### :art: Terraform Format and Style 
            Code formatted with status of \`${{ steps.fmt.outcome }}\`
            
            ### :tada: Terraform Initialization
            Terraform initialized with status of \`${{ steps.init.outcome }}\`
            
            ### :white_check_mark: Terraform Validation \`${{ steps.validate.outcome }}\`
            The terraform code has been validated with the status of \`${{ steps.validate.outputs.stdout }}\`.
            For more information on the validation output, please expand the details below.

            <details>
              <summary>Validation Output</summary>
              \`\`\`
                ${{ steps.validate.outputs.stdout }}
              \`\`\`
            </details>

            ### :memo: Terraform Plan \`${{ steps.plan.outcome }}\`
            The terraform plan has been generated with the status of \`${{ steps.plan.outputs.stdout }}\`.
            For more information on the plan output, please expand the details below.

            <details>
              <summary>Show Plan</summary>
              \`\`\`
                ${process.env.PLAN}
              \`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  plan-prod:
    name: "terraform plan for prod"
    if: ${{ github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: 'infra'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3

      - name: "Terraform fmt"
        id: fmt
        run: terraform fmt -check

      - name: "Terraform init"
        id: init
        run: terraform init -backend=true -backend-config="config/prod/backend.hcl"

      - name: "Terraform validate"
        id: validate
        run: terraform validate -no-color

      - name: "Terraform plan"
        id: plan
        run: terraform plan -no-color -var-file="config/prod/terraform.tfvars"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }